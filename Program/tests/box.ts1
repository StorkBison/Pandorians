import * as anchor from "@project-serum/anchor";
import * as spl from "@solana/spl-token";
import {
    PublicKey,
  SystemProgram,
  SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
  SYSVAR_RENT_PUBKEY,
} from "@solana/web3.js";
import { Program } from "@project-serum/anchor";
import { PBox } from "../target/types/p_box";
import {
  promiseWithTimeout,
  SwitchboardTestContext,
} from "@switchboard-xyz/sbv2-utils";
import {
  AnchorWallet,
  Callback,
  PermissionAccount,
  ProgramStateAccount,
  SwitchboardPermission,
  VrfAccount,
} from "@switchboard-xyz/switchboard-v2";
import { BoxState, OpenRequest } from "../client/accounts";
import { mintElephant } from "../client/mint";

describe("box", () => {
    // Configure the client to use the local cluster.
    const provider = anchor.AnchorProvider.env();
    anchor.setProvider(provider);

    // Boxes doesn't close, so we should increase this counter.
    const boxId = 0;

    const program = anchor.workspace.PBox as Program<PBox>;
    const payer = (provider.wallet as AnchorWallet).payer;

    let switchboard: SwitchboardTestContext;

    // How does it used?
    const vrfSecret = anchor.web3.Keypair.generate();

    // Some accounts
    let userKeyAccount;
    let userToken: PublicKey;
    let userTokenAccount: PublicKey;

    // OpenRequest
    const [openRequest, openRequestBump] = anchor.utils.publicKey.findProgramAddressSync(
      [
        Buffer.from("OPEN"),
        vrfSecret.publicKey.toBytes(),
        toBytesInt16(boxId)
      ],
      program.programId
    );

    // Box Authority / State
    const boxState = anchor.utils.publicKey.findProgramAddressSync(
      [
        Buffer.from("BOX"),
        toBytesInt16(boxId)
      ],
      program.programId
    )[0];

    const boxWallet = anchor.utils.publicKey.findProgramAddressSync(
      [
        Buffer.from("WALLET"),
        toBytesInt16(boxId)
      ],
      program.programId
    )[0];

    // Key for Box (mint key)
    const keyMint = anchor.utils.publicKey.findProgramAddressSync(
      [
        Buffer.from("KEY"),
        toBytesInt16(boxId)
      ],
      program.programId
    )[0];

    // Token Account for putted NFT
    let boxTokenAccount;

    // ...
    const boxIxCoder = new anchor.BorshInstructionCoder(program.idl);
    const openRequestCallback: Callback = {
      programId: program.programId,
      accounts: [
        // ensure all accounts in open are populated
        { pubkey: boxState, isSigner: false, isWritable: true },
        { pubkey: openRequest, isSigner: false, isWritable: true },
        { pubkey: vrfSecret.publicKey, isSigner: false, isWritable: false },
      ],
      ixData: boxIxCoder.encode("show", { params: { boxId } }), // pass any params for instruction here
    };

    before(async () => {
      /* Minting a NFT. */
      let mint = await mintElephant(provider.connection, provider.wallet as anchor.Wallet);
      userToken = mint[0];
      userTokenAccount = mint[1];

      switchboard = await SwitchboardTestContext.loadDevnetQueue(
        provider,
        "F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy",
        5_000_000 // .005 wSOL
      );
    });

    it("Creates a box", async () => {
      return;
      await program.methods.init!({
        boxId
      })
      .accounts({
        boxState,
        boxWallet,
        keyMint,
        nativeMint: spl.NATIVE_MINT,
        payer: payer.publicKey,
        systemProgram: SystemProgram.programId,
        tokenProgram: spl.TOKEN_PROGRAM_ID,
        rent: SYSVAR_RENT_PUBKEY,
      })
      .rpc()
      .then((sig) => {
        console.log(`Init Txn: ${sig}`);
      });
    });

    it("Puts a NFT to a box", async () => {
      userKeyAccount = await spl.getOrCreateAssociatedTokenAccount(
        provider.connection,
        payer,
        keyMint,
        payer.publicKey
      );

      let boxStateAccount = await provider.connection.getAccountInfo(boxState);
      let boxStateData = BoxState.decode(boxStateAccount.data);

      boxTokenAccount = anchor.utils.publicKey.findProgramAddressSync(
        [
          Buffer.from("TOKEN"),
          toBytesInt16(boxId),
          toBytesInt16(boxStateData.nextId)
        ],
        program.programId
      )[0];

      await program.methods.put!({
        boxId
      })
      .accounts({
        boxState,
        boxTokenAccount,
        keyMint,
        userAuthority: payer.publicKey,
        userKeyAccount: userKeyAccount.address,
        userTokenAccount,
        userToken,
        systemProgram: SystemProgram.programId,
        tokenProgram: spl.TOKEN_PROGRAM_ID,
        rent: SYSVAR_RENT_PUBKEY,
      })
      .rpc()
      .then((sig) => {
        console.log(`Put Txn: ${sig}`);
      });
    });

    it("Opens box using key", async () => {
      const queue = switchboard.queue;
      const { unpermissionedVrfEnabled, authority, dataBuffer } =
        await queue.loadData();

      // Create Switchboard VRF and Permission account
      const vrfAccount = await VrfAccount.create(switchboard.program, {
        queue,
        callback: openRequestCallback,
        authority: boxState,
        keypair: vrfSecret,
      });
      console.log(`Created VRF Account: ${vrfAccount.publicKey}`);

      const permissionAccount = await PermissionAccount.create(
        switchboard.program,
        {
          authority,
          granter: queue.publicKey,
          grantee: vrfAccount.publicKey,
        }
      );
      console.log(`Created Permission Account: ${permissionAccount.publicKey}`);

      // If queue requires permissions to use VRF, check the correct authority was provided
      if (!unpermissionedVrfEnabled) {
        if (!payer.publicKey.equals(authority)) {
          throw new Error(
            `queue requires PERMIT_VRF_REQUESTS and wrong queue authority provided`
          );
        }

        await permissionAccount.set({
          authority: payer,
          permission: SwitchboardPermission.PERMIT_VRF_REQUESTS,
          enable: true,
        });
        console.log(`Set VRF Permissions`);
      }

      // Get required switchboard accounts
      const [programStateAccount, programStateBump] =
        ProgramStateAccount.fromSeed(switchboard.program);
      const [permissionKey, permissionBump] = PermissionAccount.fromSeed(
        switchboard.program,
        authority,
        queue.publicKey,
        vrfAccount.publicKey
      );
      const { escrow } = await vrfAccount.loadData();

      await program.methods.open!({
        boxId,
        switchboardStateBump: programStateBump,
        permissionBump,
      })
      .accounts({
        boxState,
        boxWallet,
        keyMint,
        openRequest,
        userAuthority: payer.publicKey,
        userKeyAccount: userKeyAccount.address,
        vrf: vrfAccount.publicKey,
        oracleQueue: queue.publicKey,
        queueAuthority: authority,
        dataBuffer,
        permission: permissionAccount.publicKey,
        escrow,
        programState: programStateAccount.publicKey,
        recentBlockhashes: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
        switchboardProgram: switchboard.program.programId,
        systemProgram: SystemProgram.programId,
        tokenProgram: spl.TOKEN_PROGRAM_ID
      })
      .rpc()
      .then((sig) => {
        console.log(`Shove Txn: ${sig}`);
      });

      console.log(`Waiting updates of ${ openRequest.toBase58() }`);
      const result = await awaitCallback(
          program.provider.connection,
          openRequest,
          55_000
        );
    
      console.log(`OpenRequest Result: ${JSON.stringify(result)}`);
    });

    it("Takes an NFT", async () => {
      let openRequestAccount = await provider.connection.getAccountInfo(openRequest);
      let openRequestData = OpenRequest.decode(openRequestAccount.data);

      const boxTokenAccount2 = anchor.utils.publicKey.findProgramAddressSync(
        [
          Buffer.from("TOKEN"),
          toBytesInt16(boxId),
          toBytesInt16(openRequestData.tokenId)
        ],
        program.programId
      )[0];

      await program.methods.take!({
        boxId,
        tokenId: openRequestData.tokenId
      })
      .accounts({
        boxState,
        boxTokenAccount: boxTokenAccount2,
        openRequest,
        payer: payer.publicKey,
        userAuthority: payer.publicKey,
        systemProgram: SystemProgram.programId,
        tokenProgram: spl.TOKEN_PROGRAM_ID,
        rent: SYSVAR_RENT_PUBKEY,
      })
      .rpc()
      .then((sig) => {
        console.log(`Take Txn: ${sig}`);
      });

    });

    after(async () => {});
    
});

function toBytesInt16 (num) {
  return Buffer.from([
    (num & 0xff00) >> 8,
    (num & 0x00ff)
  ]);
}

async function awaitCallback(
  connection: anchor.web3.Connection,
  openRequestKey: anchor.web3.PublicKey,
  timeoutInterval: number,
  errorMsg = "Timed out waiting for VRF Client callback"
) {
  let ws: number | undefined = undefined;
  const result: OpenRequest = await promiseWithTimeout(
    timeoutInterval,
    new Promise(
      (
        resolve: (result: OpenRequest) => void,
        reject: (reason: string) => void
      ) => {
        ws = connection.onAccountChange(
          openRequestKey,
          async (
            accountInfo: anchor.web3.AccountInfo<Buffer>,
            context: anchor.web3.Context
          ) => {
            const clientState = OpenRequest.decode(accountInfo.data);
            if (clientState.tokenId > 0) {
              resolve(clientState);
            }
          }
        );
      }
    ).finally(async () => {
      if (ws) {
        await connection.removeAccountChangeListener(ws);
      }
      ws = undefined;
    }),
    new Error(errorMsg)
  ).finally(async () => {
    if (ws) {
      await connection.removeAccountChangeListener(ws);
    }
    ws = undefined;
  });

  return result;
}
